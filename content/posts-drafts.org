#+TITLE: The Title Of This BlogPost
#+DATE: 2015-11-10
#+CATEGORY: comma, separated, list, of, tags


This is an org mode based file where I draft all my posts. It orginized in top level categories. 
# I will need to link for the workflow of how to turn a draft into a final, published article

* Emacs

** Pelican + Orgmode                                        :orgmode:pelican:
For awhile now I'm trying to create a workflow for writing and publishing a blog post. Here is a list of my requirments:
1. The source should be in a text based format, so text, markdown or org, each will be good.
2. I would like to be able to manage and edit from one folder, preferable the folder where I have all my notes.

Until recently, I wrote my articles in markdown. When I was done with the article, I copied it to the content folder in my pelicon based blog. I then run `make html` to process the source into a static html, and when I was sutisfied with the piece, I would have pushed the pelican output folder to aws, where my blog is hosted.

Rarely was I satisfied with the piece when copying it to the pelican folder. Many times I had to do some final editing. Since I edited my original text in a a markdown editor, and the code for the site in Sublime Text, I was inclined to the open the article in Sublime, cause mose of the times I was already there, messing with other code, and do the changes on the spot. In that broken workflow, I was left with two copies for each of my posts. Most of the times these copies weren't identicle. So, once copying a post into pelican, I couldn't trust that I can edit the original post, but had to go back to the content folder, and open the post there. That turned my central note folder useless when it came to managing my posts. 

I recently started to work with emacs, and move a lot of my text based activities to it. And so working on the site and on articles are done at the same place. 

I still want to keep a version of my posts in dropbox though, so I still want to have some kind of export workflow in place. This is also true since I want to start writing my posts in org, which isn't supported out of the box by pelican.

So after a long introduction, the problem I'm trying to solve is 

**** How to export a post from my dropbox folder to the content folder in Pelican?
I want to have the editable format of the article available only in one place. What I've experienced so far was that I started an article in my notes folder, at first through nvAlt and then moved to emacs and deft. When I thought I was done and moved the article to the content 
*** Configure Org mode to publish (in general)
This is a straight forward customization. I had to follow the tutorial.

*** Configure the html export to pelican
*** Importing html file into Pelican
It turns out importing to pelican is harder than I expected.

But, the export doesn't work as I thought it will. The problem was that the header that Pelican expect, wasn't translated in a way it can work with. So as a result, the file that was created in the Pelican content folder wasn't compiled to the output.

*** Trying an import to markdown
HTML publishing didn't work for now. Before trying to work on the main problem, which is the header of the file, I'll try to do a markdown export and see that it works. If it does, I might keep it like that and work with org to markdown.

Markdown export doesn't work well also. Two issues that I had:
- Org add the outline of the post on top. This is annoying, but I'm sure I can find the solution easily, but not at the moment.
- The bigger issue is that I can't seem to be able to pass the head meta tags that Pelican expects to get and process.

Hitting the wall. Markdown export doesn't work either.

*** Trying the org-export
I tried to follow [[http://nhoffman.github.io/borborygmi/getting-started.html][this article]] but wasn't able to make it work. I cloned [[https://github.com/nhoffman/org-export][the repository]] and made the export. But still, the header meta wasn't included in the output HTML. Now the post mentioned another utility that was "easily" created to do that, but it's not included, so what's the point in the article...?


So, just as I'm about to give up, I found a way that allows me to pass header parameters to the html output. Now, I can have org communicate with pelican. I don't like this solution that much, because it clatters my org file with markup, but this is something I can live with.

[[https://github.com/fniessen/org-html-themes/blob/328260286c89aa0b8a4f3bd6be902de50da696bf/setup/theme-bigblow-local.setup][reference to how the header tag looks like]]

Now, I'm only missing the syntax highlighting in the output file, the one that goes to the site.
Found a solution for that. I had to include htmlize, and now I can export or files into html! yay.

Next problem to solve:
Footnotes are shown awkwardly. I've looked for a setting that will allow me to remove the footnote header. Found this variable "Org Footnote Section" and removed the "Collect footnotes under heading" to nil. I'm going to restart emacs and see what happens. Finger crossed...

Oh wow. I found the tresure! I went to emacs settings and searched for "org html export". I found that I can control evry element of the export, including how the footnotes section will be formated. But I'm greedy, and now looking for header construction, in a way that I can include tags or meta headers in markdown or org format, and have them translate into header tags. This way I won't have to include ugly markups in my source files.

Found [[https://pavpanchekha.com/blog/org-mode-publish.html][another article]] that was helpful in understanding how ord export works, and include some tips on setting up the publishing hook for git - export the site whenever I do a commit. I might get back to it at some point.
 

Ok, I think I got to the end of the journey. I found out that after all the trubles that I went through, there is a [[https://github.com/getpelican/pelican-plugins/tree/master/org_reader][plugin for pelican]]. How stupid am I not to figure it out. And more than that - the plugin set in my computer all this time... so reading [[http://msnyder.info/posts/2013/12/introducing-pelicorg/][this post]] walked me through the setup, and now I can have my org files directly in my pelican content directory. Halelluya!!!

One last obsecal. That damn syntaxy highlighting thing went away again. I think the first article I read had a solution for that. I'll go check it out again.

Yes, Yes, Yes! adding this simple  (require 'color-theme-github) did the trick, and now my implementation is done.

And now that I can have my org files directly in pelican, I can actually save also this pipeline posts file there, only in dradt mode.


Wait... not over yet. The publish dates of the articles are all wrong. I  digged into the org_reader plugin, and found that the problem is in the elisp file. There is a json that returns with the extraction of the date from the date property, and this date is completely wrong. I now have to learn about the functions that this code runs. Here's the bad apple code:

org-timestamp-format 

*** References
- [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing orgmode files to HTML]]
- [[http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org with Jekyll]] - This is a good reference to setup the publishing of the org files to the content folder in Jekyll. It seems that with pelican, the setup will be very similar.

- mention the good tutorial [here](http://nhoffman.github.io/borborygmi/getting-started.html)
*** Merging Drafts Into One Orgmode File
Up until now my writing workflow included creating new file for each post I started to write. I gave those drafts a file name starting with "post -". This way it was easy to sift through my posts ideas in nvAlt. 

Recentely, I moved to emacs, and was drawn into orgmode. I now write everything in org. Org is the best outliner I worked with, and so when I read [Sacha's]() tip on managing all her posts-to-be in one org outline, I got curious. I started by outlining several new ideas that I had, and eventually decided to merge my entire collection of drafts into one org file.

*** Why is it a good idea?

I started to do it, but realised quickly that it will be lame to manually copy and paste the content of some 30 files into one file. Inspired by the "Automate The Boring Stuff With Python" that I read couple of months ago, I thought this might be a good opportunity to implement what I learned. And so I went ahead and wrote the following script that scan my draft files, create a new outline header from the filename (minuse the "post - "prefix) and append the content of each file under the relevant header.



** Setting Emacs on Mac for Python


*** What do I try to achive with this integration?
#+DATE: 2015-11-06

- Python syntax highlighting
- Auto-complition, including for default and 3rd party packages
- Evaluate code in a seperate, horizontal buffer (like I did in CodeRunner)


I recently moved all my writing to emacs, and since I do, or should I say - try to do some python coding -  I searched for a tutorial on how to customize emacs as a Python editor. 

Before emacs, the litle Python I wrote, was done with CodeRunner and Sublime Text, but mostly in the out-of-box IDLE. Each one of these enviornemt lacked something, so I didn't have any strings attached when I decided to move my coding to emacs.

I started to google things like "setting emacs for python on mac", but I didn't find one tutorial that could walk me through the entire configuration. I did find some useful sprinkles of tips and information. 

# Give an exapmles for useful posts. Jesika is one, the video of the Japanese guy is another.

 anything relevant. So instead of keep looking, I decided to figure it out myself, and write a tutorial on it, so other in my position have a better start than I had. 


** Switching buffer focus
By default, the keybinding to circle through open buffers is `C-x o`. I couldn't think of a more annoying keybinding, requiring two steps to just switch focus to another buffer. 

I decided to change this behavior and define a different keybinding, that fits better with my mental model, which associate `tab` with switching between different areas on the screen. This was also a good opportunity to establish a workflow for customizing various behaviors of emacs. 

Here's the workflow I came up with:
- Define what the outcome behavior should be. In this case, I wanted to define a comfortable keybinding to circle through open bufferes.
# In my case

- Is there already a keybinding for that function? if yes, look for the function this keybinding trigger. `C-h k RET [keybinding]` will describe exactly what happens when you run the sequence of keys.
# In my case

- Locate the function that is triggered when the keybinding used.
# In my case...

- Go to your init file, where the keybinding of your liking should be configured.

- Insert this elips snippet anywhere[fn:1]
#+BEGIN_SRC emacs-lisp
(global-set-key [(control tab)] 'other-window)
#+END_SRC

#+RESULTS:
: other-window


This is a good example for how to start customizing emacs. I first looked for what


** Exporting a post from org mode to pelican
I'm trying to move my blog posts from markdown to org.

Starting with an outline that is part of a bigger org file that holds all my drafts.
In my Dropbox folder, I keep all my notes in a Notes/ folder. In that folder I created a sub-folder for all my posts. 

I then killed the sub-tree that held my draft and yanked it into a new org file in the post folder. 

Now, before exporting this post to an HTML in the pelican folder, I needed to add some meta data, especially date, which pelican is finicky about. 

Ok, reporting failure on that for now. I didn't find a good reference to how I do the export to HTML, and what org headers I need to use to make the transition. And so I did for now, an export to markdown, saved the markdown in the Pelicon content folder and published from there.

This is a bad compromise, because I had to do some modifications to the markdown document, such as adding 
** Load dired-x by default                                            :emacs:
There are times when I want to take a peek at a file's underlying folder. I might want to open another file from that folder, do a quick rename or just get myself oriented about where the file I'm working on lives.

I learned that there is a [[http://www.cs.washington.edu/acm/tutorials/editors/dired-refcard.gnu.pdf][keybinding]] for it, but that I can use this keybinding only if I have dired-x enabled. 

After some googling I learned that dired-x is part of emacs, and there is no need to install anything. I needed, however, to enable it somehow[fn:2]. A little more digging till I found in the [[http://www.gnu.org/software/emacs/manual/html_node/dired-x/Optional-Installation-Dired-Jump.html][dired manual]] the following code snippet that will auto load the package:

#+BEGIN_SRC emacs-lisp
(autoload 'dired-jump "dired-x"
  "Jump to Dired buffer corresponding to current buffer." t)

(autoload 'dired-jump-other-window "dired-x"
  "Like \\[dired-jump] (dired-jump) but in other window." t)

(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)
#+END_SRC  

And now, `C-x C-j` will open the folder of the current file. `C-x 4 C-j` will open the folder in a different window.


** Add several folders to deft
*** Question
- How do I pass a list of folders so deft search in them?


*** Answer
There is no way to specify more than one folder. The variable name hint to that - it called setq deft-directory - note directory in singular rather than plural[fn:3]
*** Reference
- [[http://jblevins.org/projects/deft/][Deft documentation page]]


** Links in orgmode

*** Create an external link
The format for a link in org is:
#+BEGIN_SRC 
[[link_url][description]]
#+END_SRC

I found it tricky to use this convention. The way I inclined to create links is to first construct he governing brackets, so to get something like [[][]][fn:4]. I'll then go and add the description and lastly the url. 

The problem is that when I enter the description part, and move the point outside the description's enclosed paranthesees, the link changes, and all I can see is the description. In that view I can't modify the url part of the link.

I found the answer in [[http://orgmode.org/guide/Link-format.html#Link-format][Org Mode Compact Guide]] 
#+BEGIN_QUOTE

Org will recognize plain URL-like links and activate them as clickable
links. The general link format, however, looks like this: 

#+BEGIN_SRC 
[[link][description]] or alternatively [[link]] 
#+END_SRC

Once a link in the buffer is complete (all brackets present), Org will change the display so that ‘description’ is displayed instead of ‘[[link][description]]’ and ‘link’ is
displayed instead of ‘[[link]]’. To edit the invisible ‘link’ part, use
C-c C-l with the cursor on the link.

#+END_QUOTE

So now, instead of constructing the markup for a link, I simply type 'C-c C-l RET' at the point where I want the reference link to be inserted. In the prompt that shows in the mini-buffer, I enter the link's url and the description. I 

* Work
** Elastic Search is amazing

*** Fraking
Few years ago, gas prices went beserk, to well over 150$ a barrle. It seemed as if oil will be over in just a few years. Might be good news for some, but that's not the argument I'm trying to get at.

Anyway, just as it seemed that we are forced into a oil-less economy, and started to think of sustainable energy resources, fraking started to cought out steam as a way to access deep layers of pockets of gas and oil. Suddenly oil resovoure quadrupled(?)

# oil reservoir with and without fracking - what's the differenct?

Again, I'm not an anti inviormentalist, so get of my back. What I'm trying to get at is that Elastic Search is like fraking, just without all the bad things that comes with it. Let me share with you how ES feels like from a product point of view.

*** It took us almost a month to drill a report

*** It took us a year to create a pool of content, and it's very limited.

*** Elastic search brings all though resources to the ground level
Now, with easy to use interface, even non-technocal people can dig the data and play with it. Suddenly we have milions of documents at the tip of our finger, and I can search for documents in with any filter I'm interested in, just like I can do with Google, only that I know that I will get content in return.


#+BEGIN_SRC js 
{
  "size": 75,
  "query": {
    "filtered": {
      "query": {
        "range": {
          "Leiki.Metallica": {
            "gte": 0.5
          }
        }
      },
      "filter": {
        "term": {
          "langId": "en"
        }
      }
    }
  }
}
#+END_SRC

 

* Other
** No Exuse to Blogging
*** What is the question I would like to answer?
- Which excuse are you working on first, or are there other things that
are getting in your way?

*** Answer
- I like a lot the write as you learn
- Answer a question. This one is helpful in particular, because not only it helps with writing, but it also helps a lot to focus, and prioritize what I'm going to learn and write about. I simply have to come up with answers.j
- Write about the stuff that you google for and find now satisfactory answer
- Write for yourself, as a documentation or note to self
* Footnotes

[fn:1] Just make sure you don't stepping inside of another decleration. 
# how can I make sure I'm not doing that?
[fn:2] The way [[http://www.emacswiki.org/emacs/DiredExtra#Dired_X][EmacsWiki]] suggests to enable it didn't work for me, because it requires to use dired before using dired-x. 

[fn:3] Note to self - is it a true assumption that I can tell from a variable name whether it can hold a list of only a single value?

[fn:4] I still follow a tip that I've learned from my C professor - always insert pairs - so I never have to worry about finding which parentheses I forgot to close.

