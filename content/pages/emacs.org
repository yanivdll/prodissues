#+TITLE:      Emacs Stuff
#+AUTHOR:	Yaniv
#+EMAIL:	yanivdll@gmail.com
#+DATE:     2015-12-24
#+URI:        
#+STATUS:   draft
#+KEYWORDS:   
#+TAGS:       
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:2 \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 

* Open questions
** TODO How do I change font size?
   :PROPERTIES:
   :ID:       B245181F-27AB-45A6-97A3-C8BE9DA4801D
   :END:
** TODO How can I see writing statistics?
   :PROPERTIES:
   :ID:       4FFCCB60-7EBF-41EF-8A74-28E015588434
   :END:
Hmm, some interesting commands that I find in the menu. Complete word, wonder what it does. Let's try. I did, and I don't fully understand what it should do, or how it does it. I gave up for now. Tools is the second (or lowere) priority.
** Why did I have to include the following line in the init.el file?
I had to use it when calling evil mode using use-packagem, otherwise it didn't load.
#+BEGIN_SRC emacs
-lisp
(package-initialize)
#+END_SRC

Here's a link to an answer that I didn't fully understand. Maybe I will later in my journy:
http://stackoverflow.com/questions/11127109/emacs-24-package-system-initialization-problems 
** DONE Do I want to show the posts that I already published showing in Deft?
I don't think so, because the idea of having deft was that I can see the wip documents only. 
** TODO something
   :PROPERTIES:
   :ID:       887C2DF2-57E4-42E0-988C-D8BCCF933AFB
   :END:

** Copying an org sub-tree to a new file
I want to do it when I move a post from a draft to a final post. 
Currently, one issue that I experience is that the sub-tree doesn't move with the relevant footnotes. Also, the footnotes are number based, and the order is meaningful, even if the footnotes are for different drafts.
** How I fucked up my Emacs init
*** What I did to get this error
- I tried to install org-reveal package.
- Set it up, but got an error with the org-reveal package.
- Looked online, and saw that it has something to do with the new org api, and that I need to get the new reveal package.
- I didn't know how to update the package, and instead, I removed it and installed it again.
- From there a cycle of craziness started, through which my config file messed up.

I need to try and find the pages that I visited through the pass of destuction...

*** Bread crumbs:
- [[https://github.com/yjwen/org-reveal/issues/36][Wrong number of arguments when calling org-html-checkbox #36]]

*** What did I do to solve it
- I backed up the ~.status.el~ file in the ~/.emacs.d/el-get~ folder. When I did that and reload the init file, I was asked to creat this file again. I accepted, and startup went through without having the previous ~(org-define-error (quote org-link-broken) "Unable to resolve link; aborting") require(ox)~ error.
- No I got a new error, but it seems to be related with el-get packages that I initiate in my init, and don't defined in the new ~.status.el~ file. 
* Learn
** TODO Yasnippet
*** Reference
- [[http://capitaomorte.github.io/yasnippet/index.html][Package homepage]]
** TODO How to turn emacs to a python IDE
   :PROPERTIES:
   :ID:       DBE9B9AE-4338-4CBA-8A97-CE03DA813F1C
   :END:
Read here: http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/
** DONE Working with org-mode (sacha)
   :PROPERTIES:
   :ID:       776DA6F8-51E5-4E96-B230-A22FD783D9EC
   :END:
Read this: http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/
** TODO Learn how to use the capture mode in org mode
   :PROPERTIES:
   :ID:       8862AF76-5477-4EFF-8160-BB6420B2C33A
   :END:
** DONE Learn how to manage init file as an org file
   :PROPERTIES:
   :ID:       B0D4E7A1-BE63-4B7B-9ECB-1914D48998B7
   :END:
- Heres a video about how to do it: https://www.youtube.com/watch?v=VIuOwIBL-ZU
- Packages needed:
  - Use-Package
  - Add this piece of code to init.el
    (org-babel-load-file (concat user-emacs-directory "config.org"))
** TODO Emacs macros - how do they work
   :PROPERTIES:
   :ID:       B5622DE5-168C-42A7-B7C9-3D9440832D81
   :END:
I know how to record a simple macro, but need more understandin on how to creat more complex ones, and how to creat reusable ones.
** TODO How do I get into a typing mode in emacs?
* Shortcuts (source: http://www.gnu.org/software/emacs/tour/)
** Dired
Extended: http://www.cs.washington.edu/acm/tutorials/editors/dired-refcard.gnu.pdf
  
| Shortcut | Description                                                           |
|----------+-----------------------------------------------------------------------|
| M-x      | dired                                                                 |
| C-x C-q  | (or M-x wdired-change-to-wdired-mode) switches to Editable Dired mode |
| C-x C-s  | ("save") renames the indicated files                                  |
** Navigation

| Shortcut | Description                 |
|----------+-----------------------------|
| C-a      | Beginning of line           |
| M-f      | Forward one word            |
| M-a      | Previous sentence           |
| M-v      | Previous screen             |
| M-<      | Beginning of buffer         |
| C-e      | End of line                 |
| M-b      | Back one word               |
| M-e      | Next sentence               |
| C-v      | Next screen                 |
| M->      | End of buffer               |
| C-s      | Incremental search forward  |
| C-r      | Incremental search backward |

*** My additions
- Defined in keyboard maestro

| Keybinding | Description     |
|------------+-----------------|
| Cmd-Tab    | Other window    |
| Cmd-p      | Previous buffer |
| Cmd-n      | Next buffer     |

** Marks

| Shortcut  | Description                                          |
|-----------+------------------------------------------------------|
| C-x C-x   | Swap point and mark                                  |
| C-u C-SPC | Cycle through mark ring                              |
| C-x h     | Make region contain the entire buffer ("Select all") |
| M-h       | Make region contain the current paragraph            |
| C-x n n   | Narrow buffer to the current region                  |
| C-x n w   | Restore ("widen") buffer                             |

** Killing\Yanking (Copy-paste)
*** Killing

| Shortcut   | Description                                        |
|------------+----------------------------------------------------|
| C-k        | Kill line                                          |
| C-u 10 C-k | Kill 10 lines                                      |
| C-w        | Kill region ("cut")                                |
| M-w        | Save region to kill ring without deleting ("copy") |
| M-d        | Kill next word                                     |
| M-k        | Kill to end of sentence                            |

*** Yanking

| Shortcut | Description                                     |
|----------+-------------------------------------------------|
| C-y      | Yanks last killed text                          |
| M-y      | Replace yanked text with previously killed text |

** Undo

| Shortcut | Description |
|----------+-------------|
| C-/      | Undo        |
| C-_      | Undo        |
| C-x u    | Undo        |
** Org-mode
http://orgmode.org/orgcard.txt

| Shortcut | Description                                                   |
|----------+---------------------------------------------------------------|
| <s       | Insert source code (need to say what language the code is in) |
| C-c '    | Edit source code in a seperate buffer                         |

** Deft
| Shortcut | Description            |
|----------+------------------------|
| C-c C-c  | clear buffer           |
| C-c C-d  | delete file, from deft |
| C-c C-n  | quick create file      |
| C-c C-m  | prompt to create file  |
| C-c C-a  | archive file           |
| C-c C-r  | rename file            |

* Diary of my learning
** Emacs NYC meetup
*** November 2, 2015
**** Presentation library
called zpresentation

**** Org mode

#+BEGIN_SRC emacs-lisp  :tangle no

(message "Hello, world!")

#+END_SRC 

#+RESULTS:
: Hello, world!



** Custom themes
   :PROPERTIES:
   :ID:       4C79E2F0-A192-418C-9858-96ABA72EF27E
   :END:
- The need - I want to be able to switch themes quicly and without having to touch the init file
- [X] Read this - http://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
- [X] How do I find what theme is active at the moment?
- I had to add two lines of code to the config.org file, that disable all themes before enabling a new one. This was important to avoide unexpected results due to inferitance that happen between themes. The reason is that themes are additive, and not cleening the ground before they loads. So if one theme set the background color for example, and the next theme doesn't, then the background color of the previous theme will still be used when enabling the next font. Here's the link where I took the two lines of code:
http://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme
- The previous point is also the reason why it's not possible to see which theme is in effect at each given time.

*** Themes that I liked:
- [[https://github.com/porterjamesj/crowsfoot/tree/30509fc0cf6d4c29f2d1d9ec87783340a7158538][Crowsfoot]] - here's the [[http://jamesporter.me][live blog]]
- [[https://github.com/getpelican/pelican-themes/tree/master/nmnlist][nmnlist]] (dark theme) - here's the [[http://nodotcom.org][live blog]]
- [[https://github.com/getpelican/pelican-themes/tree/master/dev-random2][Dev-random2]] - this one is simple, and will need some work on layout if I choose to use it.
- [[https://github.com/nairobilug/pelican-alchemy/tree/43f23f05b9adc0c6bf18d2f4ebd47771a7fe8f4a][alchemy]] - here's a [[https://nairobilug.or.ke][live demo]] - I like this one a lot.
** Check the value of a variable
You can see the current value of a variable, any variable, by using the describe-variable function, which is usually invoked by typing *C-h v*. If you type C-h v and then kill-ring (followed by RET) when prompted, you will see what is in your current kill ring—this may be quite a lot!
https://www.gnu.org/software/emacs/manual/html_node/eintr/See-variable-current-value.html
** TODO Dired extra
   :PROPERTIES:
   :ID:       22E0589A-589A-4545-9324-F5137D55F39A
   :END:
- [ ] Read this - https://www.gnu.org/software/emacs/manual/html_node/dired-x/Features.html#Features
** Use-package
   This is a package that make it easier to call the packages with their parameters. I guess it should help with the lisp language or something. It also suppose to load emacs much faster.
Anyway, I use it to allow me to write the org mode based configuration file in a more clear language.
Here's the package git page:https://github.com/jwiegley/use-package
** How to start a code snippet in an org file
<s - TAB

#+BEGIN_SRC emacs-lisp

#+END_SRC




** Deft - a nvAlt alternative
This is a package that brings nvAlt into emacs. 
I use f8 to load the deft buffer from anywhere.
*** Documentation
** Insert new line bellow
I know how to insert new line above:
| Binding | Description                                               |
|---------+-----------------------------------------------------------|
| C-m     | add new line above. Keep the point with the existing line |
| C-o     | add new line above. Move point to the new line            |
'
I now wanted to know how I do the same, but for a line bellow. 

** Elisp
*** Evaluate an expression
| Keybinding | Comment                                 |
|------------+-----------------------------------------|
| C-j        | Evaluate the last expression and put result in place |
| C-x C-e    | Evaluate the last expression and put result in minibuffer |
| C-M-x      | Evaluate the top-level form containing point, or after point.              |

*** Lists
- ~cons~ - construct a list 
#+BEGIN_SRC emacs-lisp
(cons 1 '(3))

#+END_SRC

#+RESULTS:
| 1 | 3 |


~cons~ add an element to the head\top of a list. The list it should be added to must be quoted.

- ~car~ - split the list to its top element (head) and the rest (tail). ~car~ extract the head.

#+BEGIN_SRC emacs-lisp
(car '(1 4 6))

#+END_SRC

#+RESULTS:
: 1

- ~cdr~ - extract the tail of the list

#+BEGIN_SRC emacs-lisp
(cdr '(1 4 6))

#+END_SRC

#+RESULTS:
| 4 | 6 |

*** Symbols

Symbols contains the following cells:
- Operators or functions
- Data values
- Property list
- The symbols printed name

**** Define symbols and variables
- ~set~ - expect the variable name and value. Variable name should be preceeded by ~'~, to denote it's quoted.
- ~steq~ - same as ~set~, only that it remove the need to preceed the variable name with a ~'~ (its meaning is set quote)
- ~defvar~ - like ~set~ and ~setq~, only that it's used to define vartiable that weren't defined before. If a variable was already defined, this call will not do anything.

~set~ and ~setq~ define *global variables*.

*** Functions
- ~C-x b~ - default buffer is the last buffer visited. So in that mode, clicking ~RET~ will take you to the previous buffer, i.e:

#+BEGIN_SRC emacs-lisp
(switch-to-buffer (other-buffer))
#+END_SRC

- Interactive function is one that can be called from ~M-x~
- The 5 elements of a function definition (in uppercase)

 #+BEGIN_SRC emacs-lisp
 (defun FUNCTION-NAME (ARGUMENTS…)
       "OPTIONAL-DOCUMENTATION…"
       (interactive ARGUMENT-PASSING-INFO)     ; optional
       BODY…)
 #+END_SRC

 Here's an example for a function:

 #+BEGIN_SRC emacs-lisp
 (defun me/say-that()
        "Write text to the minibuffer"
        (interactive)
        (message "this is my first function"))
 #+END_SRC

- The documentation part is what shows when typeing ~C-h f~ and the name of the function.

**** Interactive function

- In interactive functions, the return value isn't displayed in the minibuffer. This is because we usually call interactive functions for their side effect, and not in order to display a return value. In my example above, the return value /do/ appear in the mini buffer, because I specifically ask for it, by calling the "message" function.

- Tip: ~C-u 3~ and ~M-3~ are both the same - they are passing the argument 3 to the function to be called.

- ~(interactive "p")~ - the "p" tells Emacs to pass the prefix argument ot the function and use its value for the argument of the function.

- Question: how do I pass to a function an argument that isn't a number. It seems that using ~C-u~ and then a string or character doesn't work (for example ~C-u d~ type the character d 4 times (4 is the default value of ~C-u~).

- Answer: Emacs has more
than twenty characters predefined for use with ‘interactive’.  In almost
every case, one of these options will enable you to pass the right
information interactively to a function.  (*Note Code Characters for
‘interactive’: (elisp)Interactive Codes.)

*** Variables
- ~set~ and ~setq~ are used for global variables.
- ~let~ is used to define a local variable. Local variable lives only within the ~let~ expression.

#+BEGIN_SRC emacs-lisp
     (let VARLIST BODY…)
#+END_SRC


#+BEGIN_SRC emacs-lisp
     (let ((VARIABLE VALUE)
           (VARIABLE VALUE)
           …)
       BODY…)
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (let ((zebra 'stripes)
           (tiger 'fierce))
       (message "One kind of animal has %s and another is %s."
                zebra tiger))
#+END_SRC

- The varaiables list should be encapsulated in parenthesis, even if we define only one variable. Here's the example from above, with one variable, instead of two:

#+BEGIN_SRC emacs-lisp
(let ((zebra 'stripes))
       (message "One kind of animal has %s and another is unknown."
                zebra))
#+END_SRC

The ~(zebra 'stripes)~ argument is encapuslated in paranthesis.
*** ~if~ statement

**** ~if-then~
This is when only if-then is evatluated.
The template in this case is:

#+BEGIN_SRC emacs-lisp
   (if TRUE-OR-FALSE-TEST
         ACTION-TO-CARRY-OUT-IF-THE-TEST-RETURNS-TRUE)
#+END_SRC

For example:

#+BEGIN_SRC emacs-lisp
(if (> 5 4)                             ; if-part
    (message "5 is greater than 4!"))   ; then-part
#+END_SRC

**** ~if-then-else~

- The word “else” is not written in the Lisp code; the else-part of an
‘if’ expression comes after the then-part.  
- It is customary to write the else part in a line of its own, and intending it less than the then-part.

Following is the template:

#+BEGIN_SRC emacs-lisp
 (if TRUE-OR-FALSE-TEST
         ACTION-TO-CARRY-OUT-IF-THE-TEST-RETURNS-TRUE
       ACTION-TO-CARRY-OUT-IF-THE-TEST-RETURNS-FALSE)
#+END_SRC

And an example:
#+BEGIN_SRC emacs-lisp
(if (> 4 5)                               ; if-part
    (message "4 falsely greater than 5!") ; then-part
  (message "4 is not greater than 5!"))   ; else-part
#+END_SRC

